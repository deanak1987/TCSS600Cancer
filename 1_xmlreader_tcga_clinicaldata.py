# -*- coding: utf-8 -*-
"""1_XMLreader_TCGA_ClinicalData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nw-owXEOrIp-egVdYuP55BrNWR54a5qI
"""
import glob

# # Montando acesso ao Goole drive
# from google.colab import drive
# import glob
# drive.mount('/content/drive')

# https://docs.python.org/2/library/xml.etree.elementtree.html

# Opening an xml file

file_path = '/mnt/f/TCSS600Cancer'
input_folder = '1_scripts_input'
extension = '/*.xml'
filenames = []

# for filename in glob.glob("1script/*.xml"):
for filename in glob.glob("1_scripts_input/*.xml"):
    filenames.append(filename)
    print(filename)

import xml.etree.ElementTree as ET
from lxml import etree as LT

roots = []
trees = []
namespaces = []
for filename in filenames:
    tree = ET.parse(filename)  # Read file
    root = tree.getroot()  # Parse XML
    roots.append(root)
    trees.append(tree)

    root_node = LT.parse(filename).getroot()
    namespace = root_node.nsmap
    namespaces.append(namespace)

len(roots), len(trees), len(namespaces)

namespaces


def xml_element_valid(xml_element, path):
    return True if xml_element.find(path) is not None else False


def many_xml_attrib(xml_element, path, attributes):
    results = []
    for attr in attributes:
        data = xml_one_element(xml_element, path, attr)
        results.append(data)
    return results


def xml_one_element(xml_element, path, attrib):
    if xml_element_valid(xml_element, path):
        return xml_element.find(path).attrib.get(attrib)
    else:
        return None


def xml_many_elements(xml_element, path):
    return xml_element.findall(path)


def xml_text_value(xml_element, path):
    if xml_element_valid(xml_element, path):
        return xml_element.find(path).text
    else:
        return None


def xml_many_text_elements(xml_element, path):
    list_elements = xml_many_elements(xml_element, path)
    if len(list_elements) > 1:
        text_one = list_elements[0].text
        text_two = list_elements[1].text
    elif len(list_elements) == 1:
        text_one = list_elements[0].text
        text_two = 'NA'
    else:
        text_one = 'NA'
        text_two = 'NA'
    return (text_one, text_two)


tag_lists = []
tag_list = []
# Capturando todas as tags do documento
for tree in trees:
    for elem in tree.iter():
        tag_list.append(elem.tag)
    # tag_list  = list(set(tag_list))
    tag_lists.append(tag_list)

# for tag_list in tag_lists:
#   # print(len(tag_list))

# print(tag_list)

tag_lists[0].index('{http://tcga.nci/bcr/xml/clinical/radiation/2.7}radiations')

for namespace in namespaces:
    print(list(namespace.items())[0][0])

tag_list = []
rows = []

for root, namespace in zip(roots, namespaces):
    substitutions = {v: k for k, v in namespace.items()}
    patient_index_namespace = list(namespace.items())[0][0]

    path = '{' + namespace[patient_index_namespace] + '}' + 'patient'
    patient_data = {}
    patients = xml_many_elements(root, path)

    for patient in patients:
        attrib = 'preferred_name'
        for element in patient.iter():
            # print(elem.tag)
            tag = element.tag
            tag_list.append(tag)
            preferred_name = xml_one_element(patient, tag, attrib)
            # print(tag, preferred_name)
            address = tag.split('}')[0].replace('{', '')
            # print('prefixo: ', address)

            if preferred_name == '' or preferred_name == None:
                preferred_name = tag.split('}')[1]
                # print("###", tag, preferred_name)

            value = xml_text_value(patient, tag)

            prefix = substitutions[address]
            # print('prefixo: ', prefix)

            key = prefix + '-' + preferred_name
            # key = preferred_name

            patient_data[key] = value
            # print('chave: ',key, ' ++ valor: ',value)
    rows.append(patient_data)

len(patient_data.keys())

import pandas as pd

df = pd.DataFrame(rows, columns=patient_data.keys())
print(df)

for col in df.columns:
    print(col)
    print("Absolute count: ", df[col].value_counts())
    print("Relative count: ", df[col].value_counts(normalize=True))
    print('Valores Na: ', df[col].isna().sum())
    # Count distinct observations over requested axis.
    # print(len(df)/df[col].nunique())
    print('\n')

"""Removing columns containing ONLY na values"""
# df = df.dropna(axis=1)
df['brca_shared-er_status_by_ihc'] = df['brca_shared-er_status_by_ihc'].fillna('null')
df['brca_shared-pr_status_by_ihc'] = df['brca_shared-pr_status_by_ihc'].fillna('null')
df['brca_shared-her2_status_by_ihc'] = df['brca_shared-her2_status_by_ihc'].fillna('null')
df = df.dropna(axis=1)

query_cols = [col for col in df.columns if 'status_by_ihc' in col]
print(query_cols[:-1])

for col in query_cols:
    print(col)
    print(df[col].value_counts(normalize=True))
    print('Valores Na: ', df[col].isna().sum())
    # Count distinct observations over requested axis.
    # print(len(df)/df[col].nunique())
    print('\n\n')

er_col = 'brca_shared-er_status_by_ihc'
pr_col = 'brca_shared-pr_status_by_ihc'
her_col = 'brca_shared-her2_status_by_ihc'

df_triple_negatives = df[(df[er_col] == 'Negative') & (df[pr_col] == 'Negative') & (df[her_col] == 'Negative')]
df_er_positives = df[(df[er_col] == 'Positive')]
df_pr_positives = df[(df[pr_col] == 'Positive')]
df_her_positives = df[(df[her_col] == 'Positive')]


df_triple_negatives.shape, df_er_positives.shape, df_pr_positives.shape, df_her_positives.shape

output_folder = 'output'
df.to_csv(output_folder + "/XML_TCGA_01_XmlDataCapture_output.csv", index=False)
df_triple_negatives.to_csv(output_folder + "/XML_TCGA_02_triple_negatives.csv", index=False)
df_er_positives.to_csv(output_folder + "/XML_TCGA_03_er_positives.csv", index=False)
df_pr_positives.to_csv(output_folder + "/XML_TCGA_04_pr_positives.csv", index=False)
df_her_positives.to_csv(output_folder + "/XML_TCGA_04_her_positives.csv", index=False)

df_triple_negatives

df_triple_negatives['shared-bcr_patient_barcode']

df_er_positives['shared-bcr_patient_barcode'], df_pr_positives['shared-bcr_patient_barcode'], df_her_positives[
    'shared-bcr_patient_barcode']

print(df_er_positives)

erp_count = 0
prp_count = 0
herp_count = 0
ern_count = 0
prn_count = 0
hern_count = 0
erin_count = 0
prin_count = 0
herin_count = 0
ereq_count = 0
preq_count = 0
hereq_count = 0
erna_count = 0
prna_count = 0
herna_count = 0

for i in range(len(df)):
    if df.iloc[i][er_col] == 'Positive':
        erp_count +=1
    if df.iloc[i][pr_col] == 'Positive':
        prp_count +=1
    if df.iloc[i][her_col] == 'Positive':
        herp_count +=1
    if df.iloc[i][er_col] == 'Negative':
        ern_count +=1
    if df.iloc[i][pr_col] == 'Negative':
        prn_count +=1
    if df.iloc[i][her_col] == 'Negative':
        hern_count +=1
    if df.iloc[i][er_col] == 'Indeterminate':
        erin_count +=1
    if df.iloc[i][pr_col] == 'Indeterminate':
        prin_count +=1
    if df.iloc[i][her_col] == 'Indeterminate':
        herin_count +=1
    if df.iloc[i][er_col] == 'Equivocal':
        ereq_count +=1
    if df.iloc[i][pr_col] == 'Equivocal':
        preq_count +=1
    if df.iloc[i][her_col] == 'Equivocal':
        hereq_count +=1
    if df.iloc[i][er_col] is None:
        erna_count +=1
    if df.iloc[i][pr_col].isna:
        prna_count +=1
    if df.iloc[i][her_col].isna:
        herna_count +=1
print('ER+ biomarker count:', erp_count)
print('PR+ biomarker count:', prp_count)
print('HER2+ biomarker count:', herp_count)
print('ER- biomarker count:', ern_count)
print('PR- biomarker count:', prn_count)
print('HER2- biomarker count:', hern_count)
print('ERin biomarker count:', erin_count)
print('PRin biomarker count:', prin_count)
print('HER2in biomarker count:', herin_count)
print('EReq biomarker count:', ereq_count)
print('PReq biomarker count:', preq_count)
print('HER2eq biomarker count:', hereq_count)
print('ER NaN biomarker count:', erna_count)
print('PR NaN biomarker count:', prna_count)
print('HER2 NaN biomarker count:', herna_count)